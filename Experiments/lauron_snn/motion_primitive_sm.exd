import hbp_nrp_excontrol.nrp_states as states
from hbp_nrp_excontrol.logs import clientLogger
from smach import StateMachine
from smach.state import State
from std_msgs.msg import Float64
import rospy
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__)))
from MotionPrimitives import MotionPrimitives

FINISHED = 'FINISHED'
ERROR = 'ERROR'
PREEMPTED = 'PREEMPTED'

sm = StateMachine(outcomes=[FINISHED, ERROR, PREEMPTED])

class AdvertiseServicesState(State):
    num_legs = 6

    def __init__(self, outcomes=['success', 'aborted']):
        super(AdvertiseServicesState, self).__init__(outcomes=outcomes)
        self.subscribers = []
        for i in range(self.num_legs):
            for primitive in ["swing", "lift"]:
                self.subscribers.append(rospy.Subscriber("/group_3/leg_{}_{}".format(i, primitive), Float64, self.make_callback_func(i, primitive)))
        self.primitives = [{
            "swing" : MotionPrimitives(0, 0, [['/robot_leg{}_alpha_joint_pos_cntr/command'.format(i)],['/robot_leg{}_delta_joint_pos_cntr/command'.format(i)]]),
            "lift" : MotionPrimitives(1, 0, [['/robot_leg{}_beta_joint_pos_cntr/command'.format(i)],['/robot_leg{}_gamma_joint_pos_cntr/command'.format(i)]])
        } for i in range(self.num_legs)]
        # for prim in self.primitives:
        #     clientLogger.info(prim["swing"]._primitiveType)
        #     clientLogger.info(prim["swing"]._joints)
        #     clientLogger.info("====================")

    def execute(self, userdata):
        while not rospy.is_shutdown():
            rospy.spin()
        return 'success'
    
    def make_callback_func(self, leg_idx, primitive):
        return lambda msg: self.on_primitive_cmd_received(msg, leg_idx, primitive)

    def on_primitive_cmd_received(self, msg, leg_idx, primitive):
        stim = msg.data if leg_idx % 2 == 0 else 1.0 - msg.data
        self.primitives[leg_idx][primitive].apply(stim)

with sm:
    StateMachine.add(
      "advertise_services",
      AdvertiseServicesState(),
      transitions = {"success": "advertise_services",
                     "aborted": ERROR}
    )
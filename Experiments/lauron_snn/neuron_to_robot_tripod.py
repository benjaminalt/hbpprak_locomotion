@nrp.MapSpikeSink("output_swing_0", nrp.brain.outputs_swing[0], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_swing_1", nrp.brain.outputs_swing[1], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_swing_2", nrp.brain.outputs_swing[2], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_swing_3", nrp.brain.outputs_swing[3], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_swing_4", nrp.brain.outputs_swing[4], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_swing_5", nrp.brain.outputs_swing[5], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_lift_0", nrp.brain.outputs_lift[0], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_lift_1", nrp.brain.outputs_lift[1], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_lift_2", nrp.brain.outputs_lift[2], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_lift_3", nrp.brain.outputs_lift[3], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_lift_4", nrp.brain.outputs_lift[4], nrp.leaky_integrator_alpha)
@nrp.MapSpikeSink("output_lift_5", nrp.brain.outputs_lift[5], nrp.leaky_integrator_alpha)
@nrp.MapRobotPublisher('debug_output_0', Topic('/group_3/debug_output_0', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('debug_output_1', Topic('/group_3/debug_output_1', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_0_swing_pub', Topic('/group_3/leg_0_swing', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_1_swing_pub', Topic('/group_3/leg_1_swing', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_2_swing_pub', Topic('/group_3/leg_2_swing', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_3_swing_pub', Topic('/group_3/leg_3_swing', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_4_swing_pub', Topic('/group_3/leg_4_swing', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_5_swing_pub', Topic('/group_3/leg_5_swing', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_0_lift_pub', Topic('/group_3/leg_0_lift', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_1_lift_pub', Topic('/group_3/leg_1_lift', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_2_lift_pub', Topic('/group_3/leg_2_lift', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_3_lift_pub', Topic('/group_3/leg_3_lift', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_4_lift_pub', Topic('/group_3/leg_4_lift', std_msgs.msg.Float64))
@nrp.MapRobotPublisher('leg_5_lift_pub', Topic('/group_3/leg_5_lift', std_msgs.msg.Float64))
@nrp.Neuron2Robot()
def neuron_to_robot_tripod(t, output_swing_0, output_swing_1, output_swing_2, output_swing_3, output_swing_4, output_swing_5,
    output_lift_0, output_lift_1, output_lift_2, output_lift_3, output_lift_4, output_lift_5,
    debug_output_0, debug_output_1, leg_0_swing_pub, leg_1_swing_pub, leg_2_swing_pub, leg_3_swing_pub, leg_4_swing_pub, leg_5_swing_pub,
    leg_0_lift_pub, leg_1_lift_pub, leg_2_lift_pub, leg_3_lift_pub, leg_4_lift_pub, leg_5_lift_pub):
    if t > 2:
        max_output = 1.67
        scaling_factor = 1.0/max_output
        leg_0_swing_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_swing_0.voltage))
        leg_1_swing_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_swing_1.voltage))
        leg_2_swing_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_swing_2.voltage))
        leg_3_swing_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_swing_3.voltage))
        leg_4_swing_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_swing_4.voltage))
        leg_5_swing_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_swing_5.voltage))
        leg_0_lift_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_lift_0.voltage))
        leg_1_lift_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_lift_1.voltage))
        leg_2_lift_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_lift_2.voltage))
        leg_3_lift_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_lift_3.voltage))
        leg_4_lift_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_lift_4.voltage))
        leg_5_lift_pub.send_message(std_msgs.msg.Float64(scaling_factor * output_lift_5.voltage))
